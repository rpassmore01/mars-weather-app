{"version":3,"sources":["loading.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","apodData","roverData","time","roverPhotoIndex","photoArrLength","sol","SolInput","changeImgIndex","bind","changeInput","changeSol","this","fetchApodData","fetchSol","today","Date","hours","String","getHours","min","getMinutes","parseInt","setState","Math","floor","random","a","fetch","apod","json","window","setInterval","getDate","inputSol","rover","photos","length","event","target","value","preventDefault","className","title","copyright","explanation","src","hdurl","img_src","onSubmit","type","onChange","onClick","loading","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8c76c22.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.ad2f8600.svg\";","import loading from './loading.svg'\nimport './App.css';\nimport React from \"react\";\n\nexport default class App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            apodData: null,\n            roverData: null,\n            time: '',\n            roverPhotoIndex: 0,\n            photoArrLength: 0,\n            sol: 0,\n            SolInput: ''\n        }\n\n        // Load defaults\n        this.changeImgIndex = this.changeImgIndex.bind(this);\n        this.changeInput = this.changeInput.bind(this);\n        this.changeSol = this.changeSol.bind(this);\n    }\n\n    //Load Defaults\n    componentDidMount(){\n        this.fetchApodData();\n        this.fetchSol(this.state.sol);\n    }\n\n    // Returns a the date\n    getDate() {\n        let today = new Date();\n        let hours = String(today.getHours());\n        let min = String(today.getMinutes());\n\n        if(min < 10){\n            min = \"0\" + min;\n        }\n        if(hours>12){\n            hours = parseInt(hours) - 12;\n        }\n\n        this.setState({\n            time: hours + \":\" + min\n        })\n    }\n\n    // Change roverPhotoIndex to a random new one\n    changeImgIndex(){\n        this.setState({\n            roverPhotoIndex: Math.floor(Math.random()*this.state.photoArrLength)\n        })\n    }\n\n    // Pull JSON from NASA's APDO API\n    async fetchApodData(){\n        const apod = await fetch(`https://api.nasa.gov/planetary/apod?api_key=4yGlazBb3PftsRRldGwC15JNnjayMwNxE4pEPc1P`);\n        const apodData = await apod.json();\n        window.setInterval(()=>{\n            this.setState({\n                apodData: apodData,\n            },)\n        }, 3000)\n        this.getDate();\n    }\n\n    // Pull JSON from NASA's Curiosity Photos API\n    async fetchSol (inputSol){\n        const rover = await fetch(`https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=${inputSol}&api_key=4yGlazBb3PftsRRldGwC15JNnjayMwNxE4pEPc1P`);\n        const roverData = await rover.json();\n        this.setState({\n            roverData: roverData,\n            photoArrLength: roverData.photos.length,\n            sol: inputSol\n        })\n    }\n\n    changeInput(event){\n        this.setState({\n            SolInput:event.target.value\n        })\n    }\n\n    changeSol(event){\n        this.fetchSol(this.state.SolInput)\n        event.preventDefault()\n    }\n\n    render() {\n        window.setInterval(()=>{\n            this.getDate()\n        },5000)\n        return(\n            <div>\n                {!this.state.apodData ? (\n                    <div className=\"loadingImg\">\n                        <img src={loading} className=\"App-logo\" />\n                    </div>\n                ) : (\n                    <div className=\"mainContainer\">\n\n                        {/* Title/Introduction */}\n\n                        <h1>NASA API WEBSITE</h1>\n                        <p>Here you can see the Astronomy Picture of the Day that updates everyday around midnight, as well as the curiosity rovers photos.</p>\n                        <h3 className=\"timeFormat\">Taken from NASA APOD at {this.state.time}</h3>\n\n                        {/* Card 1 (APOD) */}\n\n                        <div className=\"infoCard\">\n                            <h1 className=\"photoName\">{this.state.apodData.title}</h1>\n                            <h2>{this.state.apodData.copyright}</h2>\n                            <p className=\"explanationText\"> {this.state.apodData.explanation}</p>\n                                <img src={this.state.apodData.hdurl} className=\"apodImg\"/>\n                        </div>\n\n                        {/* Card 2 (Curiosity) */}\n\n                        {!this.state.roverData ? <p> </p> : (\n                            <div className=\"infoCard rover\">\n                                <h2>Photos are from Sol {this.state.sol}</h2>\n                                {this.state.roverData.photos.length === 0 ? (\n                                    <h3>No Images On This Day!</h3>\n                                ): (\n                                    <div className=\"onLoad\">\n                                        <p>Browse {this.state.photoArrLength} photos from Nasa's Mars Curiosity Rover!</p>\n                                        <img src={this.state.roverData.photos[this.state.roverPhotoIndex].img_src} className=\"apodImg\"/>\n                                    </div>\n                                )}\n                                <form onSubmit={this.changeSol}>\n                                    <input type=\"text\" value={this.state.SolInput} onChange={this.changeInput}/>\n                                    <button type=\"submit\">Change Sol</button>\n                                </form>\n                                <button className=\"roverBtn\" onClick={this.changeImgIndex} >Change Photo!</button>\n                            </div>)}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}