{"version":3,"sources":["loading.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","apodData","roverData","time","roverPhotoIndex","photoArrLength","changeImgIndex","bind","today","Date","hours","String","getHours","min","getMinutes","parseInt","this","setState","Math","floor","random","a","fetch","apod","json","rover","window","setInterval","photos","length","getDate","className","title","copyright","explanation","src","hdurl","id","img_src","onClick","loading","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAAe,MAA0B,oC,eCIpBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,KACVC,UAAW,KACXC,KAAM,GACNC,gBAAiB,EACjBC,eAAgB,GAEpB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBATP,E,2CAYnB,WACI,IAAIC,EAAQ,IAAIC,KACZC,EAAQC,OAAOH,EAAMI,YACrBC,EAAMF,OAAOH,EAAMM,cAEpBD,EAAM,KACLA,EAAM,IAAMA,GAEbH,EAAM,KACLA,EAAQK,SAASL,GAAS,IAG9BM,KAAKC,SAAS,CACVd,KAAMO,EAAQ,IAAMG,M,4BAI5B,WACIG,KAAKC,SAAS,CACVb,gBAAiBc,KAAKC,MAAMD,KAAKE,SAASJ,KAAKhB,MAAMK,oB,sEAI7D,yCAAAgB,EAAA,sEACuBC,MAAM,wFAD7B,cACUC,EADV,gBAE2BA,EAAKC,OAFhC,cAEUvB,EAFV,gBAGwBqB,MAAM,6HAH9B,cAGUG,EAHV,iBAI4BA,EAAMD,OAJlC,QAIUtB,EAJV,OAKIwB,OAAOC,aAAY,WACf,EAAKV,SAAS,CACVhB,SAAUA,EACVC,UAAWA,EACXG,eAAgBH,EAAU0B,OAAOC,WAEtC,KACHb,KAAKc,UAZT,iD,0EAeA,WAAU,IAAD,OAIL,OAHAJ,OAAOC,aAAY,WACf,EAAKG,YACP,KAEE,8BACMd,KAAKhB,MAAMC,SAKT,sBAAK8B,UAAU,gBAAf,UACI,kDACA,iKACA,qBAAIA,UAAU,aAAd,qCAAoDf,KAAKhB,MAAMG,QAC/D,sBAAK4B,UAAU,WAAf,UACI,oBAAIA,UAAU,YAAd,SAA2Bf,KAAKhB,MAAMC,SAAS+B,QAC/C,6BAAKhB,KAAKhB,MAAMC,SAASgC,YACzB,oBAAGF,UAAU,kBAAb,cAAiCf,KAAKhB,MAAMC,SAASiC,eACjD,qBAAKC,IAAKnB,KAAKhB,MAAMC,SAASmC,MAAOL,UAAU,eAErDf,KAAKhB,MAAME,UACT,sBAAK6B,UAAU,iBAAf,UACI,4CAAef,KAAKhB,MAAME,UAAU0B,OAAOZ,KAAKhB,MAAMI,iBAAiBiC,MACvE,wCAAWrB,KAAKhB,MAAMK,eAAtB,wCACA,qBAAK8B,IAAKnB,KAAKhB,MAAME,UAAU0B,OAAOZ,KAAKhB,MAAMI,iBAAiBkC,QAASP,UAAU,YACrF,wBAAQA,UAAU,WAAWQ,QAASvB,KAAKV,eAA3C,8BALiB,qCAd7B,qBAAKyB,UAAU,aAAf,SACI,qBAAKI,IAAKK,EAAST,UAAU,qB,GA3DpBU,IAAMC,WCQxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ccc8cbe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.ad2f8600.svg\";","import loading from './loading.svg'\nimport './App.css';\nimport React from \"react\";\n\nexport default class App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            apodData: null,\n            roverData: null,\n            time: '',\n            roverPhotoIndex: 0,\n            photoArrLength: 0\n        }\n        this.changeImgIndex = this.changeImgIndex.bind(this);\n    }\n\n    getDate() {\n        let today = new Date();\n        let hours = String(today.getHours());\n        let min = String(today.getMinutes());\n\n        if(min < 10){\n            min = \"0\" + min;\n        }\n        if(hours>12){\n            hours = parseInt(hours) - 12;\n        }\n\n        this.setState({\n            time: hours + \":\" + min\n        })\n    }\n\n    changeImgIndex(){\n        this.setState({\n            roverPhotoIndex: Math.floor(Math.random()*this.state.photoArrLength)\n        })\n    }\n\n    async componentDidMount(){\n        const apod = await fetch(`https://api.nasa.gov/planetary/apod?api_key=4yGlazBb3PftsRRldGwC15JNnjayMwNxE4pEPc1P`);\n        const apodData = await apod.json();\n        const rover = await fetch(`https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=4yGlazBb3PftsRRldGwC15JNnjayMwNxE4pEPc1P`);\n        const roverData = await rover.json();\n        window.setInterval(()=>{\n            this.setState({\n                apodData: apodData,\n                roverData: roverData,\n                photoArrLength: roverData.photos.length\n            });\n        }, 3000)\n        this.getDate();\n    }\n\n    render() {\n        window.setInterval(()=>{\n            this.getDate()\n        },5000)\n        return(\n            <div>\n                {!this.state.apodData ? (\n                    <div className=\"loadingImg\">\n                        <img src={loading} className=\"App-logo\" />\n                    </div>\n                ) : (\n                    <div className=\"mainContainer\">\n                        <h1>NASA API WEBSITE</h1>\n                        <p>Here you can see the Astronomy Picture of the Day that updates everyday around midnight, as well as the curiosity rovers photos.</p>\n                        <h3 className=\"timeFormat\">Taken from NASA APOD at {this.state.time}</h3>\n                        <div className=\"infoCard\">\n                            <h1 className=\"photoName\">{this.state.apodData.title}</h1>\n                            <h2>{this.state.apodData.copyright}</h2>\n                            <p className=\"explanationText\"> {this.state.apodData.explanation}</p>\n                                <img src={this.state.apodData.hdurl} className=\"apodImg\"/>\n                        </div>\n                        {!this.state.roverData ? <p> </p> : (\n                            <div className=\"infoCard rover\">\n                                <h2>Image ID: {this.state.roverData.photos[this.state.roverPhotoIndex].id}</h2>\n                                <p>Browse {this.state.photoArrLength} from Nasa's Mars Curiosity Rover!</p>\n                                <img src={this.state.roverData.photos[this.state.roverPhotoIndex].img_src} className=\"apodImg\"/>\n                                <button className=\"roverBtn\" onClick={this.changeImgIndex} >Change Photo!</button>\n                            </div>)}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}