{"version":3,"sources":["loading.svg","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","className","href","target","icon","faGithub","App","props","state","apodData","roverData","time","roverPhotoIndex","photoArrLength","sol","SolInput","changeImgIndex","bind","changeImgIndexA","changeInput","changeSol","this","fetchApodData","fetchSol","today","Date","hours","String","getHours","min","getMinutes","parseInt","setState","Math","floor","random","value","newValue","a","fetch","apod","json","window","setInterval","getDate","inputSol","rover","photos","length","event","preventDefault","title","copyright","explanation","src","hdurl","url","img_src","onSubmit","type","onChange","onClick","loading","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f8e70cf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.ad2f8600.svg\";","import React from \"react\";\nimport './Footer.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {  faGithub } from '@fortawesome/free-brands-svg-icons';\n\n\nconst Footer = () => (\n    <div className=\"footer\">\n        <a href=\"https://github.com/rpassmore01/mars-weather-app\" target=\"_blank\">\n            <h3 className='gitHubLink'><FontAwesomeIcon icon={faGithub} /> Check out this project on GitHub!</h3>\n        </a>\n    </div>\n);\n\nexport default Footer;","import loading from './loading.svg'\nimport './App.css';\nimport React from \"react\";\nimport ReactPlayer from \"react-player\";\nimport Footer from \"./components/Footer\";\n\nexport default class App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            apodData: null,\n            roverData: null,\n            time: '',\n            roverPhotoIndex: 0,\n            photoArrLength: 0,\n            sol: 0,\n            SolInput: ''\n        }\n\n        // Load defaults\n        this.changeImgIndex = this.changeImgIndex.bind(this);\n        this.changeImgIndexA = this.changeImgIndexA.bind(this);\n        this.changeInput = this.changeInput.bind(this);\n        this.changeSol = this.changeSol.bind(this);\n    }\n\n    //Load Defaults\n    componentDidMount(){\n        this.fetchApodData();\n        this.fetchSol(this.state.sol);\n    }\n\n    // Returns a the date\n    getDate() {\n        let today = new Date();\n        let hours = String(today.getHours());\n        let min = String(today.getMinutes());\n\n        if(min < 10){\n            min = \"0\" + min;\n        }\n        if(hours>12){\n            hours = parseInt(hours) - 12;\n        }\n\n        this.setState({\n            time: hours + \":\" + min\n        })\n    }\n\n    // Change roverPhotoIndex to a random new one\n    changeImgIndex(){\n        this.setState({\n            roverPhotoIndex: Math.floor(Math.random()*this.state.photoArrLength)\n        })\n    }\n\n    // Change roverPhotoIndex by a specified value\n    changeImgIndexA(value) {\n        let newValue = this.state.roverPhotoIndex + value;\n        if(newValue < this.state.photoArrLength - 1 && newValue >= 0) {\n            this.setState({\n                roverPhotoIndex: newValue\n            })\n        }\n    }\n\n    // Pull JSON from NASA's APDO API\n    async fetchApodData(){\n        const apod = await fetch(`https://api.nasa.gov/planetary/apod?api_key=4yGlazBb3PftsRRldGwC15JNnjayMwNxE4pEPc1P`);\n        const apodData = await apod.json();\n        window.setInterval(()=>{\n            this.setState({\n                apodData: apodData,\n            },)\n        }, 3000)\n        this.getDate();\n    }\n\n    // Pull JSON from NASA's Curiosity Photos API\n    async fetchSol (inputSol){\n        const rover = await fetch(`https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=${inputSol}&api_key=4yGlazBb3PftsRRldGwC15JNnjayMwNxE4pEPc1P`);\n        const roverData = await rover.json();\n        this.setState({\n            roverData: roverData,\n            photoArrLength: roverData.photos.length,\n            sol: inputSol\n        })\n    }\n\n    //Change input when typing in the change sol input\n    changeInput(event){\n        this.setState({\n            SolInput:event.target.value\n        })\n    }\n\n    //Updates the current sol by refetching the Mars Rover Api to the inputed sol\n    changeSol(event){\n        this.fetchSol(this.state.SolInput)\n        event.preventDefault()\n        this.setState({\n            SolInput: ''\n        })\n    }\n\n    render() {\n        window.setInterval(()=>{\n            this.getDate()\n        },5000)\n        return(\n            <div>\n                {!this.state.apodData ? (\n                    <div className=\"loadingImg\">\n                        <img src={loading} className=\"App-logo\" />\n                    </div>\n                ) : (\n                    <div className=\"mainContainer\">\n\n                        {/* Title/Introduction */}\n\n                        <h1>NASA API WEBSITE</h1>\n                        <p>Here you can see the Astronomy Picture of the Day that updates everyday around midnight, as well as the curiosity rovers photos.</p>\n                        <h3 className=\"timeFormat\">Taken from NASA APOD at {this.state.time}</h3>\n\n                        {/* Card 1 (APOD) */}\n\n                        <div className=\"infoCard\">\n                            <h1 className=\"photoName\">{this.state.apodData.title}</h1>\n                            <h2>{this.state.apodData.copyright}</h2>\n                            <p className=\"explanationText\"> {this.state.apodData.explanation}</p>\n\n                                <img className=\"apodImg\" src={this.state.apodData.hdurl}/>\n\n                                {/* Video Support */}\n                                <ReactPlayer className=\"apodImg\" url={this.state.apodData.url}/>\n                        </div>\n\n                        {/* Card 2 (Curiosity) */}\n\n                        {!this.state.roverData ? <p> </p> : (\n                            <div className=\"infoCard rover\">\n                                <h2>Photos are from Sol {this.state.sol}</h2>\n                                {this.state.roverData.photos.length === 0 ? (\n                                    <h3>No Images On This Day!</h3>\n                                ) : (\n                                    <div className=\"onLoad\">\n                                        <p>Browse {this.state.photoArrLength} photos from Nasa's Mars Curiosity Rover!</p>\n                                        <img src={this.state.roverData.photos[this.state.roverPhotoIndex].img_src} className=\"apodImg\"/>\n                                    </div>\n                                )}\n                                <form onSubmit={this.changeSol} className=\"rover-form\">\n                                    <input className=\"change-sol\" type=\"text\" value={this.state.SolInput} onChange={this.changeInput}/>\n                                    <button className=\"change-sol-Btn\" type=\"submit\">Change Sol</button>\n                                </form>\n                                <div>\n                                    <button className=\"navBtn\" onClick={() => this.changeImgIndexA(1)} >Forward</button>\n                                    <button className=\"navBtn\" onClick={this.changeImgIndex} >Random</button>\n                                    <button className=\"navBtn\" onClick={() => this.changeImgIndexA(-1)} >Backward</button>\n                                </div>\n\n                            </div>)}\n                        <Footer className=\"footer\" />\n                    </div>\n\n                )}\n            </div>\n        );\n    }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}